---
title: Data Operations Manual
weight: 30
---

# Data Operations Manual

We have two main goals:
* To collect data from external organisations published in accordance with data specifications we created,
* and make it available as part of a national dataset.

The planning data service relies upon a set of data workflows to achieve that goal.

### Audience for this document
This document is ultimately intended for people who need to run data operations for the Planning Data Platform. It is not intended as a manual for software developers.


## Key Processes

This is our list of key processes that the team will need to perform to maintain the service. They primarily rely on running CLI tools from our
digital-land-python python package.

### Adding Endpoints To A Collection Manually

This is a fairly common process for us especially as we initially grow the data on the site.

#### 1. Checkout repo

From Github, clone the collection repo you wish to add endpoints to.

#### 2. run collection init

Run the following lines from a virtual env containing the required
python dependencies required by the collection repo

```bash
make makerules
make init
```

#### 3. get your csv of endpoints to add

Find or generate a csv file of the entries that need to be added
to the collection. Make a note of the location. The following columns need to be included in the csv:

- `endpoint-url` - the url that the collector needs to extract data from
- `documentation-url` - a url on a government related domain which contain information regarding the data
- `start-date` - the date that the collector should start from (this can be in the past)
- `plugins` - if a plugin is required to extract that data then it can be noted here othwerwise leave blank
- `pipelines` - the pipelines that need to be ran on resources collected from this endpoint. These are equivalent to the datasets and where more than one is neccessaary they should be separated by `;`
- `organisation` - the organisation which the endpoint belongs to. The name should be in [this list](https://datasette.planning.data.gov.uk/digital-land/organisation)

If you haven't been given some of the above information then reach out to the data manager or tech lead for advise.

#### 4. run `add_endpoint_and_lookups_cmd`

Run the following command from inside the repository with the virtual env created in step 2 activated.
As a minimum you'll need to include the path to the input csv generated in step 3. and the name of the collection that your working in.

Note: collection name can be retrieved from the repository name. if your working in the `conservation-area-collection` repo then you would use `conservation-area`

```
digital_land add-endpoints-and-lookups [INPUT-CSV-PATH] [COLLECTION_NAME]
```

The above command will work for the default collection set-up however you can set set the location
of the key dependenciess if any of the directories or files are in a different location.
this is unnessary the majority of the time

```
-c, --collection-dir [COLLECTION-DIRECTORY; default="/collection"] The directory containing the collection configuration files, collection logs and resources
-o, --organisation-path [ORGANISATION-CSV-PATH; default="var/cache/organisation.csv"] The path to the csv containing the list of organisations
-s, --specification-dir [SPECIFICATION-DIR; default="/specification"] The directory containing the specification files
-p, --pipeline-dir [PIPELINE-DIRECTORY; default="/pipeline"] The direcotry contianing pipeline configuration files
```

#### 5. check assigned entities are normal
After running the command, the following Collection repo
files will be modified:

```
collection/source.csv
collection/endpoints.csv
pipeline/lookup.csv
```

The console output will show a list of new lookup entries
organised by organisation and resource-hash.
E.g.

```
----------------------------------------------------------------------
>>> organisations:['local-authority-eng:ARU']
>>> resource:6c38cd1f84054051ca200d62e9715be0cd739bedbae0db9561ef091fa95f59f1
----------------------------------------------------------------------
brownfield-land,,local-authority-eng:ARU,BR23911,1729345
brownfield-land,,local-authority-eng:ARU,BR19811,1729346
...
```

Find the first lookup entry in the console output,
make a note of the entity id (the number at the end),
and find this in pipeline/lookup.csv.

Check this and all subsequent lines in lookup.csv for
any anomalies. Each record should have, as a minimum, a prefix,
organisation and reference.

#### 6. run pipeline

Run the following line from a virtual env containing the required
python dependencies required by the collection repo

```
make
```

#### 7. perform final checks of the data for any anomalies
How this step is performed will largely rely on the level of the operator's
system knowledge.
One approach might be to identify a new (or newly updated) entry in the
.csv file, and search for this entry in the digital_land website.
Navigating through to the Entity screen will show information that may
be compared to the data in the collection/source.csv

Once the pipeline is ran you can also use the following command to interrogate
the local datasets (in the sqlite files) using datasette

### Creating a new collection

This is needed when adding a dataset that doesn't belong to one of the collections
that already exist.

#### 1. Ensure the collection is noted in the specification

Not doing this won't result in any specific errors but it should be done to ensure that the list of collections in the specification is up to date. This should be done with some visiability from the standards team

#### 2. Use the [collection-template](https://github.com/digital-land/collection-template) to create a repository

The `collection-template` repo is a template repository which can be used to create
new collection repos. This is fairly simple using the Github UI. there is an option
to use the template to create a new repo if you navigate to the `collection-template`
page

#### 3. Update `.README`

Update the details in the readme file.

#### 4. Deactivate actions

The collection comes with the action ready to run every night. This should be paused until
your ready for it to be ran. This can be done by commenting out the following lines in the `.github
/workflows/run_caller.yaml` :

```
schedule:
- cron: 0 0 * * *
```

#### 5. Add endpoints, edit pipeline config files and test locally.

This is where you need to get the pipeline running locally. see our other
processes on this page for how to add data

#### 6. Re-activate actions

Once the collection is ready to be ran nightly uncomment the line from above in
the git workflow yaml file and it will start running nightly!


---
**Process Review**

Everything else is done so it's worth reviewing this process and seeing if there's
anyway we can improve it!

---


### Adding a new dataset

These requests will likely be few and far between but will happen and will require
co-ordination between both the operations and standards teams. Requests will likely
come from both the data manager and the standards team.

#### 1. Ensure the dataset has been added to the specification

Before resources can be processed for a dataset the dataset itself needs to be registered
in the specification. This includes recording which fields are needed at the end of the pipeline
and the entity number range.

This should be done by the standards team before datasets are requested to come
to the platform but if not it's worth involving them here before you continue.

Note: Don't include a collection in the dataset specification until the dataset set should go
on the site. this will allow you to run the pipeline and push data to s3 without
it being added to the platform

#### 2. Identify or create a collection

A dataset HAS to be added to a collection repository. If there isn't already one
then view the process to add a collection and follow the initial steps.

#### 3. Identify and add an endpoint for the dataset

Once the above steps have been taken the only thing needed to be done is to add endpoints for the dataset. this can be done using our add endpoints process.

Note: if you are adding a dataset that is 'hosted' by us then it can be put in a data folder of the repo and the raw github link e.g. `https://raw.githubusercontent.com/digital-land/ancient-woodland-collection/main/data/ancient-woodland-status.csv` can then be used as an endpoint.

#### 4. Test locally and in GHA

it's worth testing the dataset locally and in the GHA. this ensures that everything is working as expected. configuratino files can be altered to ensure it works as expected.

#### 5. Add the collection to the dataset in the specification

This will signal that the dataset should be loaded into the postgresql DB behind the platform. once this step is done when the collection is ran it'll upload to the platform.

---
**Process Review**

Everything else is done so it's worth reviewing this process and seeing if there's
anyway we can improve it!

---

## Validating an Endpoint

We offer two complimentary ways of doing this - a quick way using the Endpoint Checker, and a more thorough manual method.

### Validating an Endpoint with the Endpoint Checker

The [Endpoint Checker](https://github.com/digital-land/jupyter-analysis/tree/main/endpoint_checker) is a Jupyter notebook that you can use to get an idea of the level of usability of the data offered on the web by an LPA. The notebook summarises all the details related to an endpoint in one place, and is a good first place to look when validating a new endpoint.

### Validating an Endpoint using the command-line

This gives a fuller view of how the endpoint will be handled by the pipeline.

#### Prerequisites
1. Clone the collection repository locally.
1. Create and activate a virtual environment within the collection folder you just cloned.
1. Run these commands:

```bash
make makerules
make init
make
```

If you're looking at large endpoint, you can speed things up a bit by removing all the folders in collection/log and all entries from collection/endpoint.csv.

#### Validating an endpoint locally
The command takes the form shown below: 

```
digital-land collection-add-source <collection-name> <endpoint-url> organisation <organisation-name> documentation-url <documentation url>
```

All the fields given above are required, as shown in the example below:

```
digital-land collection-add-source brownfield-land htts://data.fulchester.gov.uk/brownfield/brownfield20230922.csv organisation <organisation-name> documentation-url <documentation url>
```

 
optional fields:
pipelines <dataset/pipeline> use this when dataset name is different from the collection name
licence <licence>
attribution <attribution>
 
Note :
Organisation-name format - local-authority-eng:ABC
If there is an error saying command not found make sure prerequisite steps are followed.


1. Run pipeline by running the ‘make’ command – this ensures that the resource has been downloaded by the collector
1. Go to collection/log -> search for endpoint hash you added (can be found from collection/endpoint.csv) -> open file
Make sure the status parameter has value 200 which means that the end endpoint link is valid.
If not then raise this as an issue by creating a new card


# Reference

This section of our documentation provides authoritative information about the software.

NOTE: Collection vs collection. A Collection with a capital C is the thing we are gathering - Tree Preservation Orders is a Collection, for example. When we use the term 'collection' with a small C then we mean the __activity__ of getting the data for a Collection. The collector is a term we sometimes use for the software that collects the data.

## Technical Glossary

We use a lot of terms that are very specific to our system. We have listed some of them below.

|Term|Definition|
|----|----|
|Collection Repository| This refers to one of our 30+ repositories in GitHub which contain all of the configuration to run collection, usually every night.|
|Collection Directory|The Collection directory contains both the configuration files for a collector to run and also the logs and collected resources from previous collector runs. It is inside the Collection Repository.|
|Resource|//TODO|
|Endpoint|An endpoint is a link to the data from an Organisation within a Collection.|

## Key Repositories

There are a lot of repositories within the project, many of them relating to Collections or to prototypes. The table below lists some of the key ones.

|Repository|Description|
|----|----|
|[Specification](https://github.com/digital-land/specification)|Contains the key documents that define the data we are collecting.|
|[Web Application](https://github.com/digital-land/digital-land.info)|The Python code for the [web site](https://www.planning.data.gov.uk/).|
|[Digital Land Pipeline](https://github.com/digital-land/digital-land-python) (Digital Land Python)|Python command-line tools for collecting and converting resources into a dataset, code library that supports other applications.|
[Digital Jupyter Analysis](https://github.com/digital-land/jupyter-analysis)|Pieces of analysis of the platform as jupyter notebooks.|